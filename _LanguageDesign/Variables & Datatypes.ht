import 'stdlib'


// ******************************
// **** Variable Declaration ****
// ******************************

// To delcare a variable, use the "let" keyword.
let name = "Bob"

// Assumed datatypes are supported, but if you
// want to specify the datatype explicitly, you can
// do so by placing a colon after the name of the variable
// and before the equal sign.
let age: Int = 34

// To declare constants, use the "const" keyword.
// Constants must be initialized upeon declaration
const eyeColor = "hazel"

// Structured binding
let x, y = [1, 2] // let x = 1; let y = 2;
let z, w = ("hello", false) // let z = "hello"; let w = false;
let m, p = [1, 2, 3] // let m = 1; let p = 2; // 3 does not get assigned to anything


// By default, you cannot change the type of
// a variable once it is declared or a value has
// been assigned to them. In the case that the
// variable's type MUST change during execution,
// the `let-flex` statment allows for flexible
// variable type.
// An example would be when a variable is declared
// with a value, but it may change to one of multiple
// types later in the code. 
// In practise this is a bad choise, as it may
// increase the chances of encountering
// run-time errors.
let flex flexible_type = 33;
flexible_type = "Hello World"; // This is okay


// *******************
// **** Datatypes ****
// *******************

// ****** Primitive datatypes
let string_variable: String = "some string"
let integer_variable: Int = 123
let real_variable: Real = 22/7
let boolean_variable: Bool = false
let array_variable: [Any, 4] = [1, 2, "hello", 3.14]
// Dictionaries have a combination of methods from Java's HashMaps and JS's Objects.
let dictionary_variable: Dict<Any> = { name: "Fausto", age: 19 }
let set_variable: Set<String> = { "Blueberry", "Raspberry", "Strawberry" }

// ****** Other primitive datatypes
// Function: An uninvoked function.
// void: Used ONLY when a function does not return a value (and thus returning the default value of null).
// any: Accepts any datatype.
// Null: A single-value datatype for null expressions/variables. See bellow.

// ****** Printing the datatype of a variable
print(type(real_variable)) // Real

// ****** Strings
let the_string = "This is a string"
print(the_string.toLowercase().replace("i", "e")) // "thes es a streng"
// String templating. The "$(E)" operator
print("We say that $(the_string), you know") // "We say that This is a tring, you know"
// String concatenation
print("We say that " + the_string) // "We say that This is a tring"
// String multiplication
print("I Love NY\n" * 3) // "I Love NY"
                         // "I Love NY"
                         // "I Love NY"
print("I have 20 characters".length()) // 20


// ****** Array datatypes
// Arrays can hold multiple data types at the same time,
// but thet have fixed length. The first entry of the array definition
// determines the data type/s that the array can hold, the second value
// can be an integer to define a 1-dimensional array, or an n-tuple to
// define an n-dimensional array.
let single_type_array: [String, 4] = ["fausto", "Genesis", "Martha", "Robert"] // this array can only contain string elements
const mixed_types_array: [String | Int, 2] = ["age", 22] // This array can contain any number of strings or integers
let muldimensional_array: [Int, (2, 3)] = [
    [0, 0, 4]
    [0, 1, 6],
]

// ****** Tuples: Ordered, typed arrays
let location: (String, String, Int) = ("Concord", "North Carolina", 28027)

// ****** Null -> NULL itself means absence of data
// It is not required for a variable to be initialized.
// If a variable it not initialized, a datatype must be
// specified, and the variable will hold a value of null
let someUndefinedVariable: String
// Variables can be initialized with a null-value.
let someNullVariable: Null = null
// Sometimes a varibale may hold a value of null or another value.
// In that case, you use the NString, NInt, NReal,
// NBool, NDict, or NSet datatypes accordingly. Using these
// datatypes tells the compiler that the variable is of type
// String, Int, Real, Bool, Dict, or Set respectivaly, but it
// may also be Null. This can be useful if you don't know when
// a function may return a null value, and prevents compiler errors.
// For example, the variable bellow will hold a value of null instead
// of throwing a compiler error because string_variable cannot be
// typecaseted to an integer, but the variable can still hold the value of null.
let someNullVariable: NInt = string_variable as Int
// The above line is equivalent to `let someNullVariable: Int | Null = string_variable as Int`


// *********************
// **** Typecasting ****
// *********************

// The "as" operaror is used to cast the left-hand-side
// expression into the type specified in the right-hand-side.
// The "as" operator throws a RunTimeError if the left side
// cannot be typecasted into the type of the right side.

print("3.14" as Int) // 3
print(false as String) // "0"
print(5 as Real) // 5.0
print(2.62 as Int) // 2


// **************************
// **** Custom Datatypes ****
// **************************

// ****** type -> Defines a custom type for a variable
type customType = String | [String, 2] | Int;
let cVar: customType = "Hello World";

// ****** Structure for dictionary objects
// Hinton Script has support for dictionaries (JSON objects).
struct PostData {
    title: String,
    id: Int,
    isPublic: Bool = false,
    location: Int | String,
    attachment: NString
}
// Because the "attachment" key in the "PostData" structure has type NString,
// it is not required to be declared in the dictionary, and calling it will return
// a value of null. Similarly, isPublic also does not require to be defined
// in the dictionary because it has been initialized in the structure. All other
// properties are required to be present in the dictionary.
const heroPost: Dict<PostData> = {
    id: 32,
    title: "Welcome to the First Post",
    location: "Concord, NC",
    isPublic: true // overrides the initialized value.
}
print((heroPost.id, heroPost.title, heroPost.attachment), separator=",") // 32, Welcome to the First Post, Null

// ****** Enumerables
// By default, the keys in an enumerable
// will be mapped to an integer starting
// at 0, and up to n-1, where n in the
// number of elements in the enumerable.
enum defaultEnum {
    value1,
    value2,
    value3,
    value4
}
// Enumerables have similar properties as dictionaries
print(defaultEnum.value3) // value3
print(defaultEnum.value2.val()) // 1

// Enumerables can also hold other values
// Members of an enum must all have the same type.
enum customEnum {
    english = "hello world",
    spanish = "hola mundo",
    italian = "ciao mondo"
}
print(customEnum.spanish.val()) // "hola mundo"

// Enumerables should only be used as data structure.
let myVar: customEnum = customEnum.italian

print(typeof(5)) // Int
print(typeof(defaultEnum)) // Enum