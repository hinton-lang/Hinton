/**
 * This is a multiline comment
 * The following is a recursive function
 */
func factorial(n) {
    if (n <= 1) return 1;
    return n * factorial(n - 1);
}

// This is a constant
const welcome = "Welcome to the program\n";

// Printing to the console
print(welcome)

// This is a variable.
// The `input(message: String)` is a function to
// obtain user input from the console.
// The `int(x)` is a function to convert the given
// argument to an integer.
let x = int(input("Compute the factorial of: "));
print(factorial(x))

// While loops
while(true) {
    let again = input("Compute another? (y/n): ");
    
    if (again equals "y") {
        let x = int(input("Compute the factorial of: "));
        print(factorial(x))
        continue;
    }

    if (again equals "n") break;
}


// ====================================
// Classes
// ====================================
class Breakfast {
    // Fields can be final.
    public static final ingrediends = ["eggs", "bread", "milk", "bacon", "avocado"];
    public name = "French Toast";

    /**
     * Methods are declared in the same way as functions,
     * except preced by the access modifier, and an optiona;
     * static keyword.
     */
    public func cook() {
        return [
            "Turn the stove on.",
            "Mix the ingrediendts.",
            "Cook the meal.",
            "Turn the stove off."
        ];
    }
    
    /**
     * Methods receive parameters just like functions.
     */
    public func serve(who) {
        print("Enjoy your breakfast, " + who + ".");
    }

    /**
     * Classes can be instantiated inside themselves.
     */
    public static func breakfasts() {
        let instances = [new Breakfast(), new Breakfast(), new Breakfast()];
        return instances;
    }
}

// Check static members.
print(Breakfast.ingrediends)

// Instantiating
let a = new Breakfast();
a.name = "Eggs-and-Cheese Muffin";
let b = new Breakfast();

// Check that the members of two class
// instances do not affect one onther.
print(a.name)
print(b.name)

// Check chained method call.
Breakfast.breakfasts()[2].serve("Julian")